#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
from subprocess import Popen, PIPE
import os
from requests import get
from re import search
from collections import defaultdict
from difflib import get_close_matches


r1 = 'tests/test_R1.fastq.gz'
r2 = 'tests/test_R2.fastq.gz'
sketch = 'tests/test.sk'
finch = '/home/tom/.cargo/bin/finch'
reads = f'{r1} {r2}'


def url_dict():
    d = defaultdict(list)
    fungi = ["afumigatus", "blastocystis", "calbicans",
             "cglabrata", "ckrusei", "ctropicalis", "csinensis",
             "kseptempunctata", "sparasitica", "tvaginalis"]
    ftypes = ['fasta', 'csv']
    for line in get('https://pubmlst.org/static/data/dbases.xml').text.split('\n'):
        if search('<url>', line) and not any(f in line for f in fungi) \
                and any(ft in line for ft in ftypes):
            key = line.split('pubmlst_')[1].split('_seqdef')[0]
            d[key].append(line.split('>')[1].split('<')[0])
    return d

def kindex(infile, outfile):
    child = Popen(['kma', 'index', '-i', '--', '-o', outfile], stdin=PIPE)
    child.stdin.write(infile.encode())
    return child.communicate()

for k, v in url_dict().items():
    index = ''
    for url in v:
        if 'fasta' in url:
            index += get(url).text
    kindex(index, f'db/{k}')

s = 'Klebsiella pneumoniae'
p = f"{s.split(' ')[0][0].lower()}{s.split(' ')[1]}"
get_close_matches(p, [*url_dict()])

class Finch:

    logger = logging.getLogger('\x1b[6;30;42m' + 'finch' + '\x1b[0m')

    def r_sk():
        path = 'db/refseq_sketches_21_1000.sk'
        if not os.path.isfile(path):
            url = 'https://static.onecodex.com/public/finch-rs/refseq_sketches_21_1000.sk.gz'
            # need to gunzip
            with open(path, 'wb') as out:
                out.write(get(url).content)
        return path

    def sketch_input(reads, sketch):
        cmd = ['finch', 'sketch', '-o', sketch, '-']
        #Finch.logger.info(f'Running: {" ".join(cmd)}')
        child = Popen(cmd, stdin=PIPE)
        child.stdin.write(reads.encode())
        return child.communicate()

    sketch_input(reads,sketch)

    def info(sketch):
        cmd = [finch, 'info', sketch]
        Finch.logger.info(f'Running: {" ".join(cmd)}')
        child = Popen(cmd, stdout=PIPE)
        r = child.communicate()[0].decode('utf-8').split('\n')
        return [r.slice(1,3,1).split(': ')] #uniq_kmers, ave_depth, gc%

    def dist(sketch):
        cmd = [finch, 'dist', sketch, Finch.r_sk]
        Finch.logger.info(f'Running: {" ".join(cmd)}')
        child = Popen(cmd, stdout=PIPE)
        r = json.loads(child.communicate()[0])
        return sorted(r, key=lambda k: k['mashDistance'])[0]

class KMA:

    logger = logging.getLogger('\x1b[6;30;42m' + 'kma' + '\x1b[0m')

    def index(infile, outfile):
        cmd = ['kma', 'index', '-i', '--', '-o', outfile]
        KMA.logger.info(f'Running: {" ".join(cmd)}')
        child = Popen(cmd, stdin=PIPE)
        child.stdin.write(infile.encode())
        return child.communicate()
    
    def ipe(reads, id, index, threads):
        cmd = ['kma', '-ipe', reads, '-ID', id,
               '-o', '/dev/stdout', '-t_db', index, '-t', threads]
        # -na -nf -bc90 -mct 0
        KMA.logger.info(f'Running: {" ".join(cmd)}')
        child = Popen(cmd, stdout=PIPE)
        return child.communicate()[0].decode()
