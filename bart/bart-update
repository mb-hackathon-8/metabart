#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from argparse import ArgumentParser
import os
from re import DOTALL, findall
from requests import get
from pathlib import Path
import logging
import asyncio
from sys import version_info, platform
from bart.version import __version__
from bart.bin.kma import index

__author__ = "Tom Stanton"
__credits__ = []
__license__ = "GPL"
__maintainer__ = "Tom Stanton"
__email__ = "tomdstanton@gmail.com"
__status__ = "Development"


def parse_args():
    parser = ArgumentParser(add_help=False, usage="bart-update mlst/amr")
    parser.add_argument('db', choices=['mlst', 'amr'])
    parser.add_argument("-h", action="help", help='show this help message and exit')
    args = parser.parse_args()
    return args


def main():
    bin_path = os.path.dirname(__file__)
    db_path = f'{os.path.dirname(bin_path)}/db'
    logger = logging.getLogger('root')
    logging.basicConfig(format='%(asctime)s | %(message)s', datefmt="%H:%M:%S")
    logger.setLevel(logging.DEBUG)

    args = parse_args()

    logger.info(f'this is bart {__version__} by {__author__}')
    logger.info(f'running on {platform} with Python {str(version_info[:3])[1:-1].replace(", ", ".")}')

    if 'mlst' in args.db:
        def background(f):
            def wrapped(*args, **kwargs):
                return asyncio.get_event_loop().run_in_executor(None, f, *args, **kwargs)
            return wrapped

        @background
        def build_mlst(s):
            scheme, urls = s.split('\n'), []
            name = scheme[0].replace(' ', '_').replace('/', '_').strip('.')
            for l in scheme:
                if any(ft in l for ft in ['csv', 'fasta']):
                    urls.append(l.split('>')[1].split('<')[0])

            with open(f'{db_path}/mapping/{name}.tab', 'ab') as f:
                f.write(get(urls[0]).content)
            logger.info(f'written scheme map to {db_path}/mapping/{name}.tab')
            i = ''
            for url in urls[1:]:
                i += get(url).text
            index(i, f'{db_path}/indexes/{name}')

        [f.unlink() for f in Path(f'{db_path}/mapping/').glob("*") if f.is_file()]
        for species in findall('<species>(.*?)</species>', get('https://pubmlst.org/static/data/dbases.xml').text, DOTALL):
            build_mlst(species)


    if 'amr' in args.db:
        url = 'https://ftp.ncbi.nlm.nih.gov/pathogen/Antimicrobial_resistance/AMRFinderPlus/database/latest/AMR_CDS'
        logger.info(f'indexing {url}')
        index(get(url).text, f'{db_path}/indexes/amr')

if __name__ == '__main__':
    main()