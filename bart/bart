#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from re import search, compile
from collections import defaultdict
from argparse import ArgumentParser
import os
import random
from pathlib import Path
from time import time
import logging
from sys import version_info, platform
from bart.version import __version__

__author__ = "Tom Stanton"
__credits__ = []
__license__ = "GPL"
__maintainer__ = "Tom Stanton"
__email__ = "tomdstanton@gmail.com"
__status__ = "Development"

def parse_args():
    parser = ArgumentParser(add_help=False, usage="bart *.fq.gz [options]")
    parser.add_argument('-i', nargs='+', type=Path, help='Paired-end fastq(.gz)')
    parser.add_argument('-t', type=int, default=4, help='threads')
    parser.add_argument('-q', action='store_true', default=False, help='shhh')
    parser.add_argument('--percid', type=int, default=90, help='percid')
    #parser.add_argument('--exact', action='store_false', default=True, help='turn off ST filtering by exact allele hits')
    parser.add_argument('--info', action='store_true', default=False, help='print genome info only')
    #parser.add_argument('--species', action='store_true', default=False, help='print species only')
    parser.add_argument('--mlst', action='store_true', default=False, help='run mlst')
    parser.add_argument('--schemes', action='store_true', default=False, help='print available MLST schemes')
    parser.add_argument('--bart', action='store_true', default=False, help='eat my shorts!')
    parser.add_argument('--use_scheme', metavar='scheme', nargs='?', type=str, const='',
                        help='no containment-aided scheme choice and forces scheme')
    parser.add_argument('--amr', action='store_true', default=False, help='amr gene detection')
    parser.add_argument("-h", action="help", help='show this help message and exit')
    args = parser.parse_args()
    return args


def main():
    bin_path = os.path.dirname(__file__)
    db_path = f'{os.path.dirname(bin_path)}/db'
    logger = logging.getLogger('root')
    logging.basicConfig(format='%(asctime)s | %(message)s', datefmt="%H:%M:%S")
    logger.setLevel(logging.DEBUG)

    args = parse_args()

    if args.schemes:
        d = [f.name.split('.')[0] for f in os.scandir(f'{db_path}/mapping/')]
        exit(print(*sorted(d), sep="\n"))

    if args.bart:
        with open(f"{bin_path}/bart_ascii.txt") as f:
            exit(print(f'''{f.read()}

            {random.choice(["eat my shorts!", "don't have a cow, man!", "i didn't do it.", "ay caramba!"])}'''))

    if args.q:
        logger.setLevel(logging.ERROR)

    start = time()

    logger.info(f'this is bart {__version__} by {__author__}')
    logger.info(f'running on {platform} with Python {str(version_info[:3])[1:-1].replace(", ", ".")}')

    ### Check input filetypes and create read-pair dict ###
    threads = str(args.t)
    if args.t > os.cpu_count():
        logger.warning(f'number of threads exceeds available CPUs')
        threads = str(os.cpu_count())
    logger.info(f'using {threads} threads')

    suffixes = ['_R[12]\.(fastq(?:\.gz)?)$', '_R[12]_[0-9]+?\.(fastq(?:\.gz)?)$',
                '_[12]\.(fastq(?:\.gz)?)$', '_R[12]\.(fq(?:\.gz)?)$',
                '_R[12]_[0-9]+?\.(fq(?:\.gz)?)$', '_[12]\.(fq(?:\.gz)?)$']

    r = compile('|'.join(suffixes))
    pairs = defaultdict(list)
    for i in args.i:
        if not os.path.isfile(i):
            logger.error(f'{i} is not a valid file')
        else:
            filename = str(i)
            s = search(r, filename)
            if s:
                pairs[filename.replace(s.group(0), '')].append(str(i))
            else:
                logger.error(f'{i} is not a fastq file')

    ### Loop over read-pair dict ###
    for name in list(pairs):
        sample = os.path.basename(name)
        logger.info(f'read pair for {sample}: {" ".join(pairs[name])}')

        if not args.amr and args.use_scheme is None:
            sketch = f'/tmp/{sample}.sk'
            if not os.path.isfile(sketch):
                from bart.bin.finch import sketch_input
                sketch_input(pairs[name], sketch)
            from bart.bin.finch import dist
            from bart.bin.mlst import choose_scheme
            scheme = choose_scheme(dist(sketch, db_path), db_path)

        if args.info:
            sketch = f'/tmp/{sample}.sk'
            if not os.path.isfile(sketch):
                from bart.bin.finch import sketch_input
                sketch_input(pairs[name], sketch)
            from bart.bin.finch import info
            x = info(sketch)
            logger.info(f'{"{:.1f}".format(int(x[0]) / 1000000)}Mbp genome, '
                        f'{x[1]} average depth, {"{:.1f}".format(float(x[2]))}% GC')

        if args.mlst:
            from bart.bin.kma import ipe
            if args.use_scheme is not None:
                if not args.use_scheme in [f.name.split('.')[0] for f in os.scandir(f'{db_path}/mapping/')]:
                    exit(logger.error(f'{args.use_scheme} not a valid scheme, use --schemes to see valid schemes'))
                else: scheme = args.use_scheme
            ipe(pairs[name], f'/tmp/{sample}', str(args.percid),
               f'{db_path}/indexes/{scheme}', threads)
            from bart.bin.mlst import match_profile
            print(*match_profile(sample,scheme,db_path), sep='\t')

        if args.amr:
            from bart.bin.kma import ipe
            ipe(pairs[name], f'/tmp/{sample}', str(args.percid),
                f'{db_path}/indexes/amr', threads)
            with open(f'/tmp/{sample}.res', newline='\n') as res:
                print(res)

    logger.info(f'completed in {"{:.1f}".format(time() - start)} seconds')
    logger.info(random.choice(["eat my shorts!", "don't have a cow, man!", "i didn't do it.", "ay caramba!"]))

if __name__ == '__main__':
    main()
